// Code Dash: Setting Up Records
// Date: 2021-06-29
// Problem: 3 Item Shop

#include <iostream>
using namespace std;

// Prototype Function
string AcceptName();
int ProductMenu(string productNames[], double productCosts[],
                const int MAX_PRODUCT, string name);
void Breakdown(string productNames[], double productCosts[],
               const int MAX_PRODUCT, double totalRevenue);
int AcceptsQuantity();
void Border();

// Defined Function
void OpeningGreetings() {
  Border();
  cout << "Welcome to my shop\n";
  Border();
}

// Global Variable: Bad Code
int badCode;

int main() {
  // Local Variables of function main
  const int MAX_PRODUCT = 5;

  string productNames[MAX_PRODUCT] = {"Apple", "Banana", "Carrot", "Donut",
                                      "Eggplant"},
         name;
  double productCosts[MAX_PRODUCT] = {10.2, 9.3, 8.4, 12.1, 7.1},
         totalRevenue = 0, totalCost = 0;
  int productCounters[MAX_PRODUCT] = {0, 0, 0, 0, 0}, menuChoice;

  do {
    // Local Variable of do while
    int placeholder, payment, productChoice;

    OpeningGreetings();
    name = AcceptName();

    // Built-in function
    system("cls");
    do {
      productChoice =
          ProductMenu(productNames, productCosts, MAX_PRODUCT, name);

      switch (productChoice) {
      case 1:
        placeholder = AcceptsQuantity();
        totalCost += (placeholder * productCosts[0]);
        productCounters[0] += placeholder;
        break;
      case 2:
        placeholder = AcceptsQuantity();
        totalCost += (placeholder * productCosts[1]);
        productCounters[1] += placeholder;
        break;
      case 3:
        placeholder = AcceptsQuantity();
        totalCost += (placeholder * productCosts[2]);
        productCounters[2] += placeholder;
        break;
      case 4:
        placeholder = AcceptsQuantity();
        totalCost += (placeholder * productCosts[3]);
        productCounters[3] += placeholder;
        break;
      case 5:
        placeholder = AcceptsQuantity();
        totalCost += (placeholder * productCosts[4]);
        productCounters[4] += placeholder;
        break;
      case 0:
        do {
          cout << "Hi! " << name << " your total cost is " << totalCost << ": ";
          cin >> payment;

          if (totalCost > payment) {
            cout << "Insufficient Payment\n";
            // Built-in
            system("pause");
            system("cls");
          } else {
            if (totalCost < payment) {
              cout << "Return " << (payment - totalCost) << "\n";
              system("pause");
              system("cls");
            }
            totalRevenue += totalCost;
            totalCost = 0;
          }
        } while (totalCost > payment);
        break;
      default:
        cout << "Incorrect input\n\n";
        system("pause");
        system("cls");
        break;
      }
      system("cls");
    } while (productChoice != 0);

    system("cls");

    cout << "Shop is not close (1)=yes (0)=0:";
    cin >> menuChoice;

    system("cls");
  } while (menuChoice != 0);

  Breakdown(productNames, productCosts, MAX_PRODUCT, totalRevenue);
  system("pause");
  return 0;
}

string AcceptName() {
  string name;

  Border();
  cout << "Enter your name:";
  cin >> name;
  Border();

  return name;
}

int ProductMenu(string productNames[], double productCosts[],
                const int MAX_PRODUCT, string name) {
  int productChoice;

  Border();
  cout << "Hi! " << name << " this is our menu:\n";
  for (int i = 0; i < MAX_PRODUCT; i++) {
    cout << (i + 1) << ". " << productNames[i] << " - " << productCosts[i]
         << endl;
  }
  cout << "0. exit" << endl << ":";
  cin >> productChoice;
  Border();

  return productChoice;
}

void Breakdown(string productNames[], double productCosts[],
               const int MAX_PRODUCT, double totalRevenue) {
  Border();
  cout << "Total Sold Items:\n";
  for (int i = 0; i < MAX_PRODUCT; i++) {
    cout << (i + 1) << productNames[i] << " - " << productCosts[i] << endl;
  }
  cout << "Total Revenue: " << totalRevenue << endl;
  Border();
}

int AcceptsQuantity() {
  int placeholder;

  cout << "Quantity: ";
  cin >> placeholder;

  return placeholder;
}

void Border() { cout << "------------------------\n"; }
