#include <iostream>
#include <string>
using namespace std;

const int MAX_FLIGHTS = 5; // Maximum number of flights
const int MAX_SEATS = 5;   // Maximum seats per flight

struct Seat {
    string passengerName;
    bool isReserved;
};

struct Flight {
    string flightTime;
    Seat seats[MAX_SEATS];
};

// Function prototypes
void InitializeFlights(Flight flights[], int flightCount);
void DisplayFlights(Flight flights[], int flightCount);
void ReserveSeat(Flight flights[], int flightCount);
void CancelReservation(Flight flights[], int flightCount);
void DisplaySeats(const Flight &flight);

int main() {
    Flight flights[MAX_FLIGHTS];
    InitializeFlights(flights, MAX_FLIGHTS);

    int choice;

    do {
        cout << "Flight Reservation System\n";
        cout << "1. View Flights\n";
        cout << "2. Reserve a Seat\n";
        cout << "3. Cancel a Reservation\n";
        cout << "0. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;
        cin.ignore(); // Ignore newline after input

        switch (choice) {
            case 1:
                DisplayFlights(flights, MAX_FLIGHTS);
                break;
            case 2:
                ReserveSeat(flights, MAX_FLIGHTS);
                break;
            case 3:
                CancelReservation(flights, MAX_FLIGHTS);
                break;
            case 0:
                cout << "Thank you for using the Flight Reservation System.\n";
                break;
            default:
                cout << "Invalid choice. Try again.\n";
        }
        cout << endl;
    } while (choice != 0);

    return 0;
}

// Initialize flight times and seats
void InitializeFlights(Flight flights[], int flightCount) {
    for (int i = 0; i < flightCount; ++i) {
        flights[i].flightTime = "Flight at " + to_string(9 + i) + ":00 AM";
        for (int j = 0; j < MAX_SEATS; ++j) {
            flights[i].seats[j].isReserved = false;
        }
    }
}

// Display all flights and their availability
void DisplayFlights(Flight flights[], int flightCount) {
    cout << "Available Flights:\n";
    for (int i = 0; i < flightCount; ++i) {
        cout << i + 1 << ". " << flights[i].flightTime << " (Available Seats: ";
        int availableSeats = 0;
        for (const auto &seat : flights[i].seats) {
            if (!seat.isReserved) availableSeats++;
        }
        cout << availableSeats << ")\n";
    }
}

// Reserve a seat on a selected flight
void ReserveSeat(Flight flights[], int flightCount) {
    int flightChoice;
    cout << "Select a flight (1-" << flightCount << "): ";
    cin >> flightChoice;

    if (flightChoice < 1 || flightChoice > flightCount) {
        cout << "Invalid flight selection.\n";
        return;
    }

    Flight &selectedFlight = flights[flightChoice - 1];
    DisplaySeats(selectedFlight);

    int seatChoice;
    cout << "Select a seat (1-" << MAX_SEATS << "): ";
    cin >> seatChoice;

    if (seatChoice < 1 || seatChoice > MAX_SEATS) {
        cout << "Invalid seat selection.\n";
        return;
    }

    Seat &selectedSeat = selectedFlight.seats[seatChoice - 1];
    if (selectedSeat.isReserved) {
        cout << "Seat already reserved.\n";
    } else {
        cout << "Enter your name: ";
        cin.ignore();
        getline(cin, selectedSeat.passengerName);
        selectedSeat.isReserved = true;
        cout << "Seat reserved successfully for " << selectedSeat.passengerName << ".\n";
    }
}

// Cancel a reservation
void CancelReservation(Flight flights[], int flightCount) {
    int flightChoice;
    cout << "Select a flight (1-" << flightCount << "): ";
    cin >> flightChoice;

    if (flightChoice < 1 || flightChoice > flightCount) {
        cout << "Invalid flight selection.\n";
        return;
    }

    Flight &selectedFlight = flights[flightChoice - 1];
    DisplaySeats(selectedFlight);

    int seatChoice;
    cout << "Select a seat to cancel (1-" << MAX_SEATS << "): ";
    cin >> seatChoice;

    if (seatChoice < 1 || seatChoice > MAX_SEATS) {
        cout << "Invalid seat selection.\n";
        return;
    }

    Seat &selectedSeat = selectedFlight.seats[seatChoice - 1];
    if (!selectedSeat.isReserved) {
        cout << "Seat is not reserved.\n";
    } else {
        cout << "Reservation for " << selectedSeat.passengerName << " has been canceled.\n";
        selectedSeat.isReserved = false;
        selectedSeat.passengerName = "";
    }
}

// Display seat availability for a flight
void DisplaySeats(const Flight &flight) {
    cout << "Seats for " << flight.flightTime << ":\n";
    for (int i = 0; i < MAX_SEATS; ++i) {
        cout << "Seat " << i + 1 << ": ";
        if (flight.seats[i].isReserved) {
            cout << "Reserved (" << flight.seats[i].passengerName << ")\n";
        } else {
            cout << "Available\n";
        }
    }
}
